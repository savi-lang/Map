:class Map.Ordered.Spec
  :is Spec
  :const describes: "Map.Ordered"

  :fun new_map: Map.Ordered(String, U64).new

  :it "stores and removes values at a given key"
    map = @new_map
    assert: map.size == 0
    assert error: map["example"]!
    assert: map.has_key("example").is_false
    assert: (map["example"] = 99) == 99
    assert: map.size == 1
    assert: map["example"]! == 99
    assert: map.has_key("example")
    assert: (map["example"] = 88) == 88
    assert: map.size == 1
    assert: map["example"]! == 88
    assert: map.has_key("example")
    assert: map.delete("example") <: None
    assert error: map["example"]!
    assert: map.has_key("example").is_false
    assert: map.size == 0

  :it "gets an existing value or inserts if it didn't exist"
    map = @new_map
    assert: map.size == 0
    assert error: map["example"]!
    assert: map.has_key("example").is_false
    assert: (map.get_or_insert("example") -> (U64[99])) == 99 // TODO: remove U64 explicit type
    assert: map.size == 1
    assert: map["example"]! == 99
    assert: map.has_key("example")
    assert: (map.get_or_insert("example") -> (U64[100])) == 99 // TODO: remove U64 explicit type
    assert: map.size == 1
    assert: map["example"]! == 99
    assert: map.has_key("example")
    assert: map.delete("example") <: None
    assert: map.size == 0
    assert error: map["example"]!
    assert: map.has_key("example").is_false
    assert: (map.get_or_insert("example") -> (U64[101])) == 101 // TODO: remove U64 explicit type
    assert: map.size == 1
    assert: map["example"]! == 101
    assert: map.has_key("example")

  :it "can be cleared, removing all keys and values"
    map = @new_map
    map["foo"] = 11
    map["bar"] = 22
    map["baz"] = 33

    assert: map.size == 3, map.clear
    assert: map.size == 0

  :it "yields each key and value (in insertion order)"
    map = @new_map
    map["foo"] = 11
    map.get_or_insert("bar") -> (U64[22]) // TODO: remove U64 explicit type
    map["baz"] = 33
    map["foo"] = 44
    map["baz"] = 55
    map["foo"] = 66

    keys Array(String) = []
    values Array(U64) = []
    map.each -> (key, value | keys << key, values << value)

    assert: keys == ["bar", "baz", "foo"]
    assert: values == [22, 55, 66]
